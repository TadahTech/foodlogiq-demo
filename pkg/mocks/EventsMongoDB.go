// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	model "github.com/TadahTech/foodlogiq-demo/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// EventsMongoDB is an autogenerated mock type for the EventsMongoDB type
type EventsMongoDB struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: event
func (_m *EventsMongoDB) CreateEvent(event *model.Event) (string, error) {
	ret := _m.Called(event)

	var r0 string
	if rf, ok := ret.Get(0).(func(*model.Event) string); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: eventId, createdBy
func (_m *EventsMongoDB) DeleteEvent(eventId string, createdBy int) error {
	ret := _m.Called(eventId, createdBy)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int) error); ok {
		r0 = rf(eventId, createdBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllEvents provides a mock function with given fields: owner
func (_m *EventsMongoDB) GetAllEvents(owner string) ([]*model.Event, error) {
	ret := _m.Called(owner)

	var r0 []*model.Event
	if rf, ok := ret.Get(0).(func(string) []*model.Event); ok {
		r0 = rf(owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: eventId, createdBy
func (_m *EventsMongoDB) GetEvent(eventId string, createdBy int) (*model.Event, error) {
	ret := _m.Called(eventId, createdBy)

	var r0 *model.Event
	if rf, ok := ret.Get(0).(func(string, int) *model.Event); ok {
		r0 = rf(eventId, createdBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(eventId, createdBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventsMongoDB interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventsMongoDB creates a new instance of EventsMongoDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventsMongoDB(t mockConstructorTestingTNewEventsMongoDB) *EventsMongoDB {
	mock := &EventsMongoDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
